BACKEND:

const mongoose = require('mongoose');
mongoose.connect('mongodb://127.0.0.1:27017/product_catalog', {
useNewUrlParser: true,
useUnifiedTopology: true
})
.then(() => console.log('‚úÖ MongoDB connected'))
.catch(err => {
console.error('‚ùå MongoDB connection error:', err);
process.exit(1);
});
const productSchema = new mongoose.Schema({
name: { type: String, required: true },
description: String,
price: { type: Number, required: true },
inStock: { type: Boolean, default: true }
}, { timestamps: true });
const Product = mongoose.model('Product', productSchema);
async function main() {
try {
await Product.deleteMany({});
console.log(' Cleared old products');
const newProduct = new Product({
name: 'Smartphone',
description: 'Latest model, 128GB storage',
price: 699.99
});
const savedProduct = await newProduct.save();
console.log('‚ûï Created Product:', savedProduct);
const products = await Product.find();
console.log(' All Products:', products);
const foundProduct = await Product.findById(savedProduct._id);
console.log(' Found Product by ID:', foundProduct);
await Product.findByIdAndDelete(savedProduct._id);
console.log('‚ùå Deleted Product by ID:', savedProduct._id);
const remaining = await Product.find();
console.log(' Remaining Products after deletion:', remaining);
} catch (error) {
console.error('‚ùå Error:', error.message);
} finally {
mongoose.connection.close();
}
}
main();


FRONTEND:

ÔÉò	Index.html
ÔÉò	Style.css
ÔÉò	Script.js

Index.html:

  <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Product Catalog</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f9;
      margin: 0;
      padding: 20px;
    }

    h1 {
      text-align: center;
      color: #333;
    }

    /* Form */
    #addForm {
      max-width: 400px;
      margin: 20px auto;
      background: #fff;
      padding: 15px;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    #addForm input {
      width: 100%;
      padding: 8px;
      margin: 5px 0;
      box-sizing: border-box;
    }

    #addForm button {
      background: #2a9d8f;
      color: white;
      padding: 10px;
      border: none;
      width: 100%;
      cursor: pointer;
      border-radius: 5px;
      margin-top: 5px;
    }

    #addForm button:hover {
      background: #21867a;
    }

    /* Product Grid */
    .catalog {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .card {
      background: #fff;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      text-align: center;
    }

    .card h3 {
      margin: 10px 0 5px;
    }

    .price {
      font-weight: bold;
      color: #2a9d8f;
    }

    .stock {
      color: #555;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <h1>üì¶ Product Catalog</h1>

  <!-- Add Product Form -->
  <form id="addForm">
    <input type="text" id="name" placeholder="Product Name" required />
    <input type="text" id="description" placeholder="Description" />
    <input type="number" id="price" placeholder="Price" required />
    <button type="submit">‚ûï Add Product</button>
  </form>

  <!-- Product List -->
  <div id="catalog" class="catalog"></div>
  <script>
    const API_URL = 'http://localhost:5000/api/products'; // ‚úÖ Backend API URL

    // Load products from backend
    async function loadProducts() {
      try {
        const res = await fetch(API_URL);
        const products = await res.json();

        const catalog = document.getElementById('catalog');
        catalog.innerHTML = '';

        products.forEach(product => {
          const div = document.createElement('div');
          div.className = 'card';
          div.innerHTML = `
            <h3>${product.name}</h3>
            <p>${product.description || ''}</p>
            <p class="price">‚Çπ${product.price}</p>
            <p class="stock">${product.inStock ? '‚úÖ In Stock' : '‚ùå Out of Stock'}</p>
          `;
          catalog.appendChild(div);
        });
      } catch (err) {
        console.error('Error loading products:', err);
      }
    }

    // Add product to backend
    document.getElementById('addForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const newProduct = {
        name: document.getElementById('name').value,
        description: document.getElementById('description').value,
        price: parseFloat(document.getElementById('price').value)
      };

      try {
        await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(newProduct)
        });
        e.target.reset();
        loadProducts();
      } catch (err) {
        console.error('Error adding product:', err);
      }
    });

    // Load products on page load
    loadProducts();
  </script>

</body>
</html>
